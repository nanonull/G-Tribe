//precision lowp float;

uniform float time;
uniform vec2 resolution;

varying vec3 v_normal;
varying float v_opacity;


mat2 m =mat2(0.8,0.6, -0.6, 0.8);

float rand(vec2 n) {
	return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
}

float noise(vec2 n) {
	const vec2 d = vec2(0.0, 1.0);
  	vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));
	return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);
}

float fbm(vec2 p){
	float f=.0;
	f+= .5000*noise(p); p*= m*2.02;
	f+= .2500*noise(p); p*= m*2.03;
	f+= .1250*noise(p); p*= m*2.01;
	f+= .0625*noise(p); p*= m*2.04;

	f/= 0.9375;

	return f;
}

void main(){

    float t = time*.1;

	vec3 ro = vec3(sin(time)*0.25, cos(time)*0.25, -15.);
    vec3 rd = normalize(vec3((gl_FragCoord.xy * 2. - resolution.xy) / min(resolution.x, resolution.y), 1.));

    // ---- rotation

    float  s = sin(t), c = cos(t);
    mat3 r = mat3(sin(time)*0.25, 0, 0,cos(time)*0.25, c, -s,0, s, c) * mat3(c, 0, s,0, 1, 0, -s, 0, c);

    // ---- positions
    vec3  n = vec3(  mod(t,5.)/12.+1.49  );

    // ---- cube length (max(abs(x) - y, 1.) )
	float flicker = fract( mod(time*1.3,.45) / sin(time*1.2) );
	for (int i = 0; i < 9; i++) {
    ro += (length(sin(ro*sin(ro*1.1)*r)-n-cos(3.1)/atan(ro.z*tan(.7)/120.-exp(.0001*t),-rd.z) )-.9) * rd;
		ro-=smoothstep(.1,.9,fract(ro));
		ro.xy+= fbm(ro.xy*3.);
	}

    // ---- shading
    //gl_FragColor.rgb = 0.5 - (vec3(.1, .15, 0.2)  *-ro.z +0.8);
    gl_FragColor.rgb = v_normal ;
    //gl_FragColor.rgb = gl_FragCoord /100;
    //gl_FragColor.r = time;
    //gl_FragColor.g = time;
    //gl_FragColor.b = time;
    gl_FragColor.a = v_opacity;

}